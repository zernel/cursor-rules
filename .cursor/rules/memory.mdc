---
description: ALWAYS INCLUDE to HAVE Project Context
globs: 
alwaysApply: false
---
---
description: ALWAYS INCLUDE to HAVE Project Context.
globs: 
alwaysApply: true
---
# Memory Files Structure

This project adopts a minimal documentation structure. All project progress, tasks, and context are centralized in the `docs/active_context.md` file.

## Core Files (Required)
1. [product_requirement.md](mdc:docs/product_requirement.md): Product Requirement Document (PRD), describing project goals, core requirements, and problems to be solved.
2. [architecture.md](mdc:docs/architecture.md): System architecture document, describing system components, relationships, dependencies, and overall flow.
3. [technical.md](mdc:docs/technical.md): Technical solution and development environment, including technology stack, environment setup, and key technical decisions.
4. [active_context.md](mdc:docs/active_context.md): Active development context, **serving as the single source for task planning, progress tracking, current work, active decisions, known issues, and next steps**.
5. [.cursor/rules/error-documentation.mdc]: Error documentation.
6. [.cursor/rules/lessons-learned.mdc]: Lessons learned.

## File Relationships & Workflow
```mermaid
flowchart TD
    PB[product_requirement.md] --> PC[technical.md]
    PB --> SP[architecture.md]
    SP --> AC[active_context.md]
    PC --> AC
    PB --> AC
    AC --> ER[error-documentation.mdc]
    AC --> LL[lessons-learned.mdc]
```

## Simplified Workflow
- All task planning, progress tracking, current status, next steps, and known issues are centralized in `active_context.md`. No need to maintain `tasks_plan.md`.
- Other documents are updated only when there are major changes in requirements, architecture, or technology.
- Errors and lessons learned are recorded in the `.cursor/rules/` directory.

---

> Please strictly follow the above structure to maintain project documentation. Ensure all dynamic content is updated in active_context.md.

# Core Workflows
Now we define the procedural workflows to read/write to these memeory files.
The system operates in distinct MODES: (PLAN/ACT) or analogously (Architect/Code), controlled exclusively by the user input or the task in current request. Current input will determine the MODE, based on which the Workflow selection is always dictated. In user input explicit mode setting can also be specified by "MODE = PLAN MODE"/"Architect MODE" or "MODE = ACT MODE"/"Code MODE", so if explicit MODE setting present follow that, else guess the mode from the request. Ask for the MODE if you are not 100% confident, if any doubt ask explicitely.

## PLAN or Architect MODE
```mermaid
flowchart TD
    Start[Start] --> ReadFiles[Read Memory Files ("docs/": (a)"docs/architecture.md" (b)"docs/product_requirement.md" (c)"docs/technical.md" (d)"docs/active_context.md" (e)"docs/tasks_plan.md".) ]
    ReadFiles --> CheckFiles{Files Complete?}
    
    CheckFiles -->|No| Plan[Create Plan]
    Plan --> DocumentChat[Document in Chat]
    
    CheckFiles -->|Yes| VerifyContext[Verify Context]
    VerifyContext --> Strategy[Develop Strategy]
    Strategy --> Present[Present Approach]
    
    Present --> Verification{Approach Verified?}

    Verification -->|No| Clarify[Seek Clarification]
    Clarify --> Strategy[Develop Strategy]

    Verification -->|Yes| DocumentMemory[Document in Memory Files ("docs/": (a)"docs/architecture.md" (b)"docs/product_requirement.md" (c)"docs/technical.md" (d)"docs/active_context.md" (e)"docs/tasks_plan.md")]
```

## ACT or Code MODE
```mermaid
flowchart TD
    Start[Start] --> Context[Check Memory Files (Core Files always ("docs/": (a)"docs/architecture.md" (b)"docs/product_requirement.md" (c)"docs/technical.md" (d)"docs/active_context.md" (e)"docs/tasks_plan.md"), rest based on context) ]
    Context --> Update[Update Documentation]
    Update --> Rules[Update [lessons-learned.mdc](mdc:.cursor/rules/lessons-learned.mdc), [error-documentation.mdc](mdc:.cursor/rules/error-documentation.mdc) if needed]
    Rules --> Execute[Execute Task]
    Execute --> Document[Document Changes in Memory Files ("docs/": (a)"docs/architecture.md" (b)"docs/product_requirement.md" (c)"docs/technical.md" (d)"docs/active_context.md" (e)"docs/tasks_plan.md") ]
```

# Documentation Updates

Memory Files updates occur when:
1. Discovering new project patterns
2. After implementing significant changes
3. When user requests with **update memory files** (MUST review ALL Core Files)
4. When context needs clarification
5. After significant part of Plan is verified

```mermaid
flowchart TD
    Start[Update Process]
    
    subgraph Process
        P1[Review Core Files]
        P2[Document Current State in [active_context.md](mdc:docs/active_context.md) and [tasks_plan.md](mdc:docs/tasks_plan.md) ]
        P3[Clarify Next Steps and document in [tasks_plan.md](mdc:docs/tasks_plan.md) ]
        P4[Update [lessons-learned.mdc](mdc:.cursor/rules/lessons-learned.mdc), [error-documentation.mdc](mdc:.cursor/rules/error-documentation.mdc)]
        P5 Update [ [architecture.md](mdc:docs/architecture.md) ]
        
        P1 --> P2 --> P3 --> P4
    end
    
    Start --> Process
```

Note: When triggered by **update memory files**, I MUST review every Core memory  file, even if some don't require updates. Focus particularly on [active_context.md](mdc:docs/active_context.md) and [tasks_plan.md](mdc:docs/tasks_plan.md) as they track current state. And [architecture.md](mdc:docs/architecture.md) has a section of current workflow that also gets updated by any code updates.

# Project Intelligence ( [lessons-learned.mdc](mdc:.cursor/rules/lessons-learned.mdc) [.cursor/rules/lessons-learned.mdc] )

The [lessons-learned.mdc](mdc:.cursor/rules/lessons-learned.mdc) file is my learning journal for each project. It captures important patterns, preferences, and project intelligence that help me work more effectively. As I work with you and the project, I'll discover and document key insights that aren't obvious from the code alone.

```mermaid
flowchart TD
    Start{Discover New Pattern}
    
    subgraph Learn [Learning Process]
        D1[Identify Pattern]
        D2[Validate with User]
        D3[Document in [lessons-learned.mdc](mdc:.cursor/rules/lessons-learned.mdc) ]
    end
    
    subgraph Apply [Usage]
        A1[Read [lessons-learned.mdc](mdc:.cursor/rules/lessons-learned.mdc) ]
        A2[Apply Learned Patterns]
        A3[Improve Future Work]
    end
    
    Start --> Learn
    Learn --> Apply
```

## What to Capture
- Critical implementation paths
- User preferences and workflow
- Project-specific patterns
- Known challenges
- Evolution of project decisions
- Tool usage patterns

The format is flexible - focus on capturing valuable insights that help me work more effectively with you and the project. Think of [lessons-learned.mdc](mdc:.cursor/rules/lessons-learned.mdc) as a living document that grows smarter as we work together.
